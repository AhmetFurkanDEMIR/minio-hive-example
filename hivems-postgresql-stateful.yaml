kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: hivems-postgresql
  namespace: hive-metastore
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: hivems
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.2.8
  annotations:
    meta.helm.sh/release-name: hivems
    meta.helm.sh/release-namespace: hive-metastore
  managedFields:
    - manager: helm
      operation: Update
      apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
        f:spec:
          f:persistentVolumeClaimRetentionPolicy:
            .: {}
            f:whenDeleted: {}
            f:whenScaled: {}
          f:podManagementPolicy: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:helm.sh/chart: {}
                f:role: {}
              f:name: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"hivems-postgresql"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"BITNAMI_DEBUG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PGDATA"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_CLIENT_MIN_MESSAGES"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_ENABLE_LDAP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_ENABLE_TLS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_LOG_CONNECTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_LOG_DISCONNECTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_LOG_HOSTNAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_PGAUDIT_LOG_CATALOG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_PORT_NUMBER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_SHARED_PRELOAD_LIBRARIES"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_VOLUME_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRES_DB"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRES_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                    k:{"name":"POSTGRES_POSTGRES_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                    k:{"name":"POSTGRES_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5432,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/bitnami/postgresql"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/dev/shm"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/docker-entrypoint-initdb.d/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"custom-init-scripts"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"dshm"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
          f:updateStrategy:
            f:type: {}
          f:volumeClaimTemplates: {}
    - manager: kube-controller-manager
      operation: Update
      apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      subresource: status
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hivems
      app.kubernetes.io/name: postgresql
      role: primary
  template:
    metadata:
      name: hivems-postgresql
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: hivems
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.2.8
        role: primary
    spec:
      volumes:
        - name: custom-init-scripts
          configMap:
            name: hive-metastore-postgresql-init
            defaultMode: 420
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
      containers:
        - name: hivems-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r83
          ports:
            - name: tcp-postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: BITNAMI_DEBUG
              value: 'false'
            - name: POSTGRESQL_PORT_NUMBER
              value: '5432'
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hivems-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: hive
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hivems-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: metastore
            - name: POSTGRESQL_ENABLE_LDAP
              value: 'no'
            - name: POSTGRESQL_ENABLE_TLS
              value: 'no'
            - name: POSTGRESQL_LOG_HOSTNAME
              value: 'false'
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: 'false'
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: 'false'
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: 'off'
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - >-
                  exec pg_isready -U "hive" -d "dbname=metastore" -h 127.0.0.1
                  -p 5432
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - '-e'
                - >
                  exec pg_isready -U "hive" -d "dbname=metastore" -h 127.0.0.1
                  -p 5432

                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f
                  /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 1001
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: primary
                    app.kubernetes.io/instance: hivems
                    app.kubernetes.io/name: postgresql
                namespaces:
                  - hive-metastore
                topologyKey: kubernetes.io/hostname
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: hivems-postgresql-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
status:
  observedGeneration: 3
  replicas: 1
  readyReplicas: 1
  currentReplicas: 1
  updatedReplicas: 1
  currentRevision: hivems-postgresql-5cfff5cfcb
  updateRevision: hivems-postgresql-5cfff5cfcb
  collisionCount: 0
  availableReplicas: 1
